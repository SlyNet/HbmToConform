<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System.ComponentModel;
using NHibernate.Mapping.ByCode;
using NHibernate.Mapping.ByCode.Conformist;

namespace <#= Model.FullType.Replace("." + Model.DomainClassName, "") #>
{
    [Localizable(false)]
    public class <#=Model.DomainClassName#>Map : ClassMapping<<#= Model.FullType #>> 
    {
        public <#=Model.DomainClassName#>Map()
        {
            Table("<#= Model.ClassTable #>");
            Lazy(<#= Model.Lazy.ToString().ToLower() #>); 
            Id(x => x.<#= Model.Id.Name #>, idMap =>
            {
                idMap.Generator(<#= Model.Id.Generator #>);
                idMap.Column("<#= Model.Id.ColumnName #>");
                <# if (Model.Id.UnsavedValue != null) {#>
                idMap.UnsavedValue(<#= Model.Id.UnsavedValue #>);
                <# } #>
                <# if(Model.Id.Access != null) {#>
                idMap.Access(<#=Model.Id.Access #>);
                <#}#>
            });

            <# if (Model.Discriminator != null) {#>
                Discriminator(d => d.Column("<#= Model.Discriminator.ColumnName #>"));
            <# } #>

            <# foreach (var ptp in Model.Properties) {#>
            Property(x => x.<#= ptp.Name #>, clm => { 
<# if (ptp.ColumnName != null) { #>
                clm.Column(c =>
                {
                    c.Name("<#= ptp.ColumnName #>");
<# if (ptp.SqlType != null) { #>
                    c.SqlType("<#= ptp.SqlType #>");
<#}#>
                });
<#}#>
<# if (ptp.NotNull) {#>
                clm.NotNullable(true);
                <#}#>
                <# if (ptp.Unique) {#>
                clm.Unique(true);
                <#}#>
                <# if(ptp.NoUpdate) {#>
                clm.Update(false);
                <#}#>
                <# if(ptp.NoInsert) {#>
                clm.Insert(false);
                <#}#>
                <# if(ptp.Length != null) {#>
                clm.Length(<#=ptp.Length#>);
                <#}#>
                <# if(ptp.Access != null) {#>
                clm.Access(<#=ptp.Access #>);
                <#}#>

                <# if(ptp.Generated != null) {#>
                    <# if (ptp.Generated.Equals("insert", StringComparison.OrdinalIgnoreCase)) {#>
                clm.Generated(PropertyGeneration.Insert);
                    <# } else if (ptp.Generated.Equals("update", StringComparison.OrdinalIgnoreCase)) {#>
                clm.Generated(PropertyGeneration.Update);
                    <#} else if (ptp.Generated.Equals("always", StringComparison.OrdinalIgnoreCase)) {#>
                clm.Generated(PropertyGeneration.Always);
                    <#}#>
                <#}#>

                <# if (ptp.UniqueKey != null) {#>
                clm.UniqueKey("<#= ptp.UniqueKey #>");
                <#}#>
            });
            <# } #>
            <# foreach (var mto in Model.ManyToOnes) {#>
            ManyToOne(x => x.<#= mto.Name #>, mto => { 
                mto.Column("<#= mto.ColumnName #>"); 
                <# if(mto.NotFoundMode != null) {#>
                mto.NotFound(<#=mto.NotFoundMode#>);
                <#}#>
                <# if(mto.NoUpdate) {#>
                mto.Update(false);
                <#}#>
                <# if(mto.NoInsert) {#>
                mto.Insert(false);
                <#}#>
                <# if (mto.Lazy != null) {#>
                mto.Lazy(<#= mto.Lazy#>);
                <#}#>
                <# if (mto.NotNull) {#>
                mto.NotNullable(true);
                <#}#>
                <# if (mto.Cascade != null) {#>
                mto.Cascade(<#= mto.Cascade #>);
                <#}#>
                <# if (mto.Unique != null) {#>
                mto.Unique(<#= mto.Unique #>);
                <#}#>
            });

            <# } #>
            <# foreach (var bag in Model.Collections) {#>
            <#= bag.CollectionType.ToString() #>(x => x.<#= bag.Name #>, bag => { 
                <# if (bag.Table != null) {#>
                bag.Table("<#= bag.Table #>"); 
                <# } #>
                <# if (bag.Lazy) {#>
                bag.Lazy(CollectionLazy.Lazy);
                <#} else {#>
                bag.Lazy(CollectionLazy.NoLazy);
                <#}#>
                <# if (bag.Inverse) {#>
                bag.Inverse(true);
                <#}#>
                <# if (bag.Cascade != null) {#>
                bag.Cascade(<#= bag.Cascade #>);
                <#}#>
                <# if(bag.KeyColumn != null) {#>
                bag.Key(k => k.Column("<#=bag.KeyColumn#>"));
                <#}#>
                <# if(bag.OrderBy != null) {#>
                bag.OrderBy("<#=bag.OrderBy#>");
                <#}#>
            }, rel => {
                    <# if (bag.RelType != null) {#>
                    rel.<#=bag.RelType#>(
                    <#}#>
                    <# if (bag.RelColumn != null) {#>
                        mtm => mtm.Column("<#=bag.RelColumn#>")
                    <#}#>
                    <# if (bag.NotFound != null) {#>
                        mtm => mtm.NotFound("<#=bag.NotFound#>")
                    <#}#>
                    );
<# if (bag.CompositeElement != null) {#>
               rel.Component(cmp =>
                    {
<#}#>
<# if (bag.CompositeElement?.Parent != null) {#>
                    cmp.Parent(x => x.<#= bag.CompositeElement.Parent #>);
<#}#>
<# foreach (var childProperty in bag.CompositeElement?.Properties ?? new List<Property>()) {#>
                        cmp.Property(x => x.<#=childProperty.Name#>, ptp => ptp.Column("<#= childProperty.ColumnName #>"));
<#}#>
<# if (bag.CompositeElement != null) {#>
                    });
<#}#>

            });
        <# } #>
        }
    }

    <# foreach (var subclass in Model.Subclasses) {#>
    [Localizable(false)]
    public class <#=subclass.ClassName#>Map : SubclassMapping<<#= subclass.FullClassName #>> 
    {
        public <#=subclass.ClassName#>Map()
        {
            <#if(subclass.DiscriminatorValue != null){#>
            DiscriminatorValue(<#= subclass.DiscriminatorValue #>);
            <#}#>
        }
    }
    <#}#>
}